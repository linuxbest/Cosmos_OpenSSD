#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_pcie
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_systemc

## Peripheral Options
OPTION RUN_NGCBUILD = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION STYLE = HDL
OPTION USAGE_LEVEL = BASE_USER
OPTION DESC = AXI master and slave systemC bind
OPTION IP_GROUP = AXI_SYSTEMC:MICROBLAZE:ARM-A9
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRODUCTION, kintex7=PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION, virtex7ht=PRE_PRODUCTION, qvirtex7=PRE_PRODUCTION, qkintex7=PRE_PRODUCTION, qkintex7l=PRE_PRODUCTION, qartix7=PRE_PRODUCTION, qartix7l=PRE_PRODUCTION, azynq=PRE_PRODUCTION, qzynq=PRE_PRODUCTION, qvirtex7l=PRE_PRODUCTION)

## Bus Interfaces
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_INSTANCE = AXI_SYSTEMC, DT = STRING
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, RANGE = (32)
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI, RANGE = (32)
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = S_AXI, RANGE = (0:1)

PARAMETER C_BASEADDR = 0xffffffff, DT = STD_LOGIC_VECTOR (31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x7F, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR (31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE
PARAMETER C_M_AXI_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORT_THREADS = 0, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_PROTOCOL = AXI4, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_SUPPORT_THREADS = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 2, DT = INTEGER, BUS = S_AXI, TYPE = NON_HDL, RANGE = (1,2)
PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 8, DT = INTEGER, BUS = S_AXI, TYPE = NON_HDL, RANGE = (1,2,4,8)
PARAMETER C_INTERCONNECT_S_AXI_IS_ACLK_ASYNC = 1, DT = INTEGER, BUS = S_AXI, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_INTERCONNECT_M_AXI_WRITE_ISSUING = 4, DT = INTEGER, BUS = M_AXI, TYPE = NON_HDL, RANGE = (1,2,4)
PARAMETER C_INTERCONNECT_M_AXI_READ_ISSUING = 4, DT = INTEGER, BUS = M_AXI, TYPE = NON_HDL, RANGE = (1,2,4)
PARAMETER C_INTERCONNECT_M_AXI_IS_ACLK_ASYNC = 1, DT = INTEGER, BUS = M_AXI, TYPE = NON_HDL, RANGE = (0,1)

## Ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI:S_AXI
PORT axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI:S_AXI

PORT interrupt = "", DIR = I

PORT s_axi_awid = AWID, DIR = I, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awaddr = AWADDR, DIR = I, VEC = [C_S_AXI_ADDR_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awregion = AWREGION, DIR = I, VEC = [3:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awlen = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awsize = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awburst = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI
PORT s_axi_wdata = WDATA, DIR = I, VEC = [C_S_AXI_DATA_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_wstrb = WSTRB, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH/8)-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_wlast = WLAST, DIR = I, BUS = S_AXI
PORT s_axi_wvalid = WVALID, DIR = I, BUS = S_AXI
PORT s_axi_wready = WREADY, DIR = O, BUS = S_AXI
PORT s_axi_bid = BID, DIR = O, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_bvalid = BVALID, DIR = O, BUS = S_AXI
PORT s_axi_bready = BREADY, DIR = I, BUS = S_AXI
PORT s_axi_arid = ARID, DIR = I, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_araddr = ARADDR, DIR = I, VEC = [C_S_AXI_ADDR_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_arregion = ARREGION, DIR = I, VEC = [3:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_arlen = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_arsize = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_arburst = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
PORT s_axi_rid = RID, DIR = O, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_rdata = RDATA, DIR = O, VEC = [C_S_AXI_DATA_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
PORT s_axi_rlast = RLAST, DIR = O, BUS = S_AXI
PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI
PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI

PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_ADDR_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_awvalid = AWVALID, DIR = O, BUS = M_AXI
PORT m_axi_awready = AWREADY, DIR = I, BUS = M_AXI
PORT m_axi_awlock = AWLOCK, DIR = O, BUS = M_AXI
PORT m_axi_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_wdata = WDATA, DIR = O, VEC = [C_M_AXI_DATA_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH/8)-1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_wlast = WLAST, DIR = O, BUS = M_AXI
PORT m_axi_wvalid = WVALID, DIR = O, BUS = M_AXI
PORT m_axi_wready = WREADY, DIR = I, BUS = M_AXI
PORT m_axi_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_bvalid = BVALID, DIR = I, BUS = M_AXI
PORT m_axi_bready = BREADY, DIR = O, BUS = M_AXI
PORT m_axi_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_ADDR_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_arvalid = ARVALID, DIR = O, BUS = M_AXI
PORT m_axi_arready = ARREADY, DIR = I, BUS = M_AXI
PORT m_axi_arlock = ARLOCK, DIR = O, BUS = M_AXI
PORT m_axi_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_rdata = RDATA, DIR = I, VEC = [C_M_AXI_DATA_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
PORT m_axi_rlast = RLAST, DIR = I, BUS = M_AXI
PORT m_axi_rvalid = RVALID, DIR = I, BUS = M_AXI
PORT m_axi_rready = RREADY, DIR = O, BUS = M_AXI

PORT ready = "", DIR = I, INITIALVAL = VCC

END
